#include <iostream>
#include <vector>
#include <map>
#include <bits/stdc++.h>
#include <cassert>

using namespace std;

class Vehicle;

class Trip
{
public:
    Trip(Vehicle *vehicle, std::string pick_up_location, std::string drop_location, int departure_time)
        : vehicle(vehicle), pick_up_location(pick_up_location), drop_location(drop_location), departure_time(departure_time), booked_seats(0) {}

    // Getter functions
    Vehicle *getVehicle() const
    {
        return vehicle;
    }

    std::string getPickUpLocation() const
    {
        return pick_up_location;
    }

    std::string getDropLocation() const
    {
        return drop_location;
    }

    int getDepartureTime() const
    {
        return departure_time;
    }

    int getBookedSeats() const
    {
        return booked_seats;
    }

    // Setter functions
    void setVehicle(Vehicle *v)
    {
        vehicle = v;
    }

    void setPickUpLocation(std::string location)
    {
        pick_up_location = location;
    }

    void setDropLocation(std::string location)
    {
        drop_location = location;
    }

    void setDepartureTime(int time)
    {
        departure_time = time;
    }

    void setBookedSeats(int seats)
    {
        booked_seats = seats;
    }

private:
    Vehicle *vehicle;
    std::string pick_up_location;
    std::string drop_location;
    int departure_time;
    int booked_seats;
};

class BinaryTreeNode
{
public:
    BinaryTreeNode(int departuretime = 0, Trip *tripenodeptr = nullptr, BinaryTreeNode *parentptr = nullptr)
        : leftptr(nullptr), rightptr(nullptr), parentptr(parentptr), departuretime(departuretime), tripnodeptr(tripenodeptr) {}

    // Getter functions
    BinaryTreeNode *getLeftPtr() const
    {
        return leftptr;
    }

    BinaryTreeNode *getRightPtr() const
    {
        return rightptr;
    }

    BinaryTreeNode *getParentPtr() const
    {
        return parentptr;
    }

    int getDepartureTime() const
    {
        return departuretime;
    }

    Trip *getTripNodePtr() const
    {
        return tripnodeptr;
    }

    // Setter functions
    void setLeftPtr(BinaryTreeNode *left)
    {
        leftptr = left;
    }

    void setRightPtr(BinaryTreeNode *right)
    {
        rightptr = right;
    }

    void setParentPtr(BinaryTreeNode *parent)
    {
        parentptr = parent;
    }

    void setDepartureTime(int time)
    {
        departuretime = time;
    }

    void setTripNodePtr(Trip *trip)
    {
        tripnodeptr = trip;
    }

private:
    BinaryTreeNode *leftptr;
    BinaryTreeNode *rightptr;
    BinaryTreeNode *parentptr;
    int departuretime;
    Trip *tripnodeptr;
};

class TransportService
{
public:
    TransportService(std::string name) : name(name), BSThead(nullptr) {}

    // Getter functions
    std::string getName() const
    {
        return name;
    }

    BinaryTreeNode *getBSTHead() const
    {
        return BSThead;
    }

    // Setter functions

    void setName(std::string service_name)
    {
        name = service_name;
    }

    void setBSTHead(BinaryTreeNode *node)
    {
        BSThead = node;
    }
    
    void insert(BinaryTreeNode* node)
    {
        if (BSThead == NULL){
            node = BSThead;
            return;
        }
        bool flag = true;
        BinaryTreeNode *temp = BSThead;
        while (flag){
            if (node->getDepartureTime() <= temp->getDepartureTime()){
                if (temp->getLeftPtr() == NULL){
                    node->setParentPtr(temp);
                    temp->setLeftPtr(node);
                    flag = false;
                }
                temp = temp->getLeftPtr();
            }
            else{
                if (temp->getRightPtr() == NULL){
                    node->setParentPtr(temp);
                    temp->setRightPtr(node);
                    flag = false;
                }
                temp = temp->getRightPtr();
            }
        }
    }

    void addTrip(int key, Trip *trip){
        BinaryTreeNode *node = new BinaryTreeNode(key);
        node->setTripNodePtr(trip);
        if (this->getBSTHead() == NULL){
            this->setBSTHead(node);
        }
        else{
            insert(node);
        }
    }

private:
    std::string name;
    BinaryTreeNode *BSThead;
};

class Vehicle
{
public:
    Vehicle(std::string vehicle_number, int seating_capacity)
        : vehicle_number(vehicle_number), seating_capacity(seating_capacity) {}

    // Getter functions
    std::string getVehicleNumber() const
    {
        return vehicle_number;
    }

    int getSeatingCapacity() const
    {
        return seating_capacity;
    }

    vector<Trip *> getTrips()
    {
        return trips;
    }

    // Setter functions
    void setVehicleNumber(std::string number)
    {
        vehicle_number = number;
    }

    void setSeatingCapacity(int capacity)
    {
        seating_capacity = capacity;
    }

    void addTrip(Trip *trip)
    {
        trips.push_back(trip);
    }

private:
    std::string vehicle_number;
    int seating_capacity;
    std::vector<Trip *> trips;
};

class Location
{
public:
    Location(std::string name) : name(name) {}

    // Getter functions
    std::string getName() const
    {
        return name;
    }

    TransportService *getServicePtr(std::string droplocation)const
    {
        for (int i = 0; i < serviceptrs.size(); i++)
        {
            if (serviceptrs[i]->getName() == droplocation)
            {
                return serviceptrs[i];
            }
        }
        return NULL;
        // string dup=droplocation;
        // TransportService *new_service1 = new TransportService(droplocation);
        // // serviceptrs.push_back(new_service1);
        // return setServicePtr(dup);
        // return new_service1;
    }
    vector<TransportService *> getServiceVector()
    {
        return serviceptrs;
    }
    // Setter functions
    void setName(std::string location_name)
    {
        name = location_name;
    }

    TransportService *setServicePtr(std::string droplocation)
    {
        TransportService *new_Service = new TransportService(droplocation);
        serviceptrs.push_back(new_Service);
        return new_Service;
    }

    void addTrip(Trip *trip)
    {
        trips.push_back(trip);
    }

private:
    std::string name;
    std::vector<TransportService *> serviceptrs;
    std::vector<Trip *> trips;
};

class BinaryTree {
protected:
    BinaryTreeNode* root;
    int Height_Recursive(BinaryTreeNode* node) const {
        if(node==NULL){
            return 0;
        }
        return 1+max(Height_Recursive(node->getLeftPtr()),Height_Recursive(node->getRightPtr()));
    }

    // int InorderTraversal(int &count,BinaryTreeNode* node)const{
    //     if(node==NULL){
    //         return count;
    //     }
    //     InorderTraversal(count,node->getLeftPtr());
    //     count=count+1;
    //     InorderTraversal(count,node->getRightPtr());
    // }

    int TotalNodes_Recursive(BinaryTreeNode *node) const
    {
        if (node == NULL){
            return 0;
        }
        return 1 + TotalNodes_Recursive(node->getLeftPtr()) + TotalNodes_Recursive(node->getRightPtr());
    }

public:
    BinaryTree() : root(nullptr) {}

    int getHeight() const {
        // Implement this function to return the height of the tree
        if(root==NULL){
            return 0;
        }
        int h = Height_Recursive(root);
        return h; // Placeholder
    }
    
    int getNumberOfNodes() const {
        // Implement this function to return the number of nodes in the tree
        // int count=0;
        // InorderTraversal(count,root);
        // int totalNodes =count;
        // return totalNodes; // Placeholder
        return TotalNodes_Recursive(root);
    }

    BinaryTreeNode* getRoot(){
        return root;
    }
    void setRoot(BinaryTreeNode* givenRoot){
        root = givenRoot;
    }
};

class BinarySearchTree : public BinaryTree {
public:
    BinarySearchTree() {}

    BinaryTreeNode* getElementWithMinimumKey() const {
        // Implement this function to return the element with the minimum key
        if(root==NULL){
            return NULL;
        }
        BinaryTreeNode* temp =root;
        while(temp->getLeftPtr()!=NULL){
            temp=temp->getLeftPtr();
        }
        return temp; // Placeholder
    }

    BinaryTreeNode* getElementWithMaximumKey() const {
        // Implement this function to return the element with the maximum key
        if(root==NULL){
            return NULL;
        }
        BinaryTreeNode* temp =root;
        while(temp->getRightPtr()!=NULL){
            temp=temp->getRightPtr();
        }
        return temp; // Placeholder
    }

    BinaryTreeNode* searchNodeWithKey(int key) const {
        // Implement this function to search for a node with the given key or the next larger key
        BinaryTreeNode*temp = root;
        BinaryTreeNode* temp1 =NULL;
        while(temp!=NULL){
            if(temp->getDepartureTime()>key){
                temp1=temp;
                temp=temp->getLeftPtr();
            }
            else if(temp->getDepartureTime()<key)
                temp=temp->getRightPtr();
            else{
                return temp;
            }
        }
        return temp1; // Placeholder
    }

    BinaryTreeNode* getSuccessorNode(BinaryTreeNode* node) const {
        // Implement this function to return the successor node of the given node
        if(node==nullptr){
            return nullptr;
        }
        BinaryTreeNode* temp1 = node->getRightPtr();
        if(temp1!=NULL){
            while(temp1->getLeftPtr()!=NULL){
                temp1=temp1->getLeftPtr();
            }
            return temp1;
        }
        else{
            temp1 = node;
            temp1=temp1->getParentPtr();
            while(temp1!=NULL && temp1->getDepartureTime()<=node->getDepartureTime()){
                temp1=temp1->getParentPtr();
            }
            return temp1;
        }
        return nullptr; // Placeholder
    }

    BinaryTreeNode* getSuccessorNodeByKey(int key) const {
        // Implement this function to return the successor node by key
        BinaryTreeNode* temp1 = searchNodeWithKey(key);
        temp1 = temp1->getRightPtr();
        if(temp1!=NULL){
            while(temp1->getLeftPtr()!=NULL){
                temp1=temp1->getLeftPtr();
            }
            return temp1;
        }
        else{
            temp1 = searchNodeWithKey(key);
            temp1=temp1->getParentPtr();
            while(temp1!=NULL && temp1->getDepartureTime()<=key){
                temp1=temp1->getParentPtr();
            }
            return temp1;
        }
        return nullptr; // Placeholder
    }

    BinaryTreeNode* getPredecessorNode(BinaryTreeNode* node) const {
        // Implement this function to return the predecessor node of the given node
        BinaryTreeNode* temp1 = node->getLeftPtr();
        if(temp1!=NULL){
            while(temp1->getRightPtr()!=NULL){
                temp1=temp1->getRightPtr();
            }
            return temp1;
        }
        else{
            temp1 = node;
            temp1=temp1->getParentPtr();
            while(temp1!=NULL && temp1->getDepartureTime()<=node->getDepartureTime()){
                temp1=temp1->getParentPtr();
            }
            return temp1;
        }
        return nullptr; // Placeholder
    }

    BinaryTreeNode* getPredecessorNodeByKey(int key) const {
        // Implement this function to return the predecessor node by key
        BinaryTreeNode* temp1 = searchNodeWithKey(key);
        temp1 = temp1->getLeftPtr();
        if(temp1!=NULL){
            while(temp1->getRightPtr()!=NULL){
                temp1=temp1->getRightPtr();
            }
            return temp1;
        }
        else{
            temp1 = searchNodeWithKey(key);
            temp1=temp1->getParentPtr();
            while(temp1!=NULL && temp1->getDepartureTime()<=key){
                temp1=temp1->getParentPtr();
            }
            return temp1;
        }
        return nullptr; // Placeholder
    }
};

class TravelDesk
{
public:
    void addTrip(std::string vehicle_number, int seating_capacity, std::string pick_up_location, std::string drop_location, int departure_time)
    {
        // Implement this function to add a trip
        int i = 0;
        int j = 0;
        Trip *new_Trip;
        TransportService *Service = new TransportService(drop_location);
        int flag1 = true;
        for (i = 0; i < vehicles.size(); i++)
        {
            if (vehicles[i]->getVehicleNumber() == vehicle_number)
            {
                flag1 = false;
                break;
            }
        }
        if (flag1)
        {
            Vehicle *new_Vehicle = new Vehicle(vehicle_number, seating_capacity);
            vehicles.push_back(new_Vehicle);
            new_Trip = new Trip(vehicles.back(), pick_up_location, drop_location, departure_time);
            vehicles.back()->addTrip(new_Trip);
        }
        else
        {
            new_Trip = new Trip(vehicles[i], pick_up_location, drop_location, departure_time);
            vehicles[i]->addTrip(new_Trip);
        }

        int flag2 = true;
        for (j = 0; j < locations.size(); j++)
        {
            if (locations[j]->getName() == pick_up_location)
            {
                flag2 = false;
                break;
            }
        }
        if (flag2)
        {
            Location *new_Location = new Location(pick_up_location);
            locations.push_back(new_Location);
            locations.back()->addTrip(new_Trip);
            // locations.back()->getServicePtr(drop_location)->addTrip(departure_time, new_Trip);
            if(locations.back()->getServicePtr(drop_location)==NULL){
                locations.back()->setServicePtr(drop_location)->addTrip(departure_time,new_Trip);
            }
            else{
                locations.back()->getServicePtr(drop_location)->addTrip(departure_time, new_Trip);
            }
        }
        else
        {
            locations[j]->addTrip(new_Trip);
            // locations[j]->getServicePtr(drop_location)->addTrip(departure_time, new_Trip);
            if(locations[j]->getServicePtr(drop_location)==NULL){
                locations[j]->setServicePtr(drop_location)->addTrip(departure_time,new_Trip);
            }
            else{
                locations[j]->getServicePtr(drop_location)->addTrip(departure_time, new_Trip);
            }
        }

    }

    std::vector<Trip *> showTrips(std::string pick_up_location, int after_time, int before_time)
    {
        // Implement this function to retrieve trips within a specified time range
        int i = 0;
        int j = 0;
        vector<Trip *> trip0;
        bool flag = false;
        vector<TransportService *> service_vector;
        for (i = 0; i < locations.size(); i++)
        {
            if (locations[i]->getName() == pick_up_location)
            {
                service_vector = locations[i]->getServiceVector();
                flag = true;
                break;
            }
        }
        if (flag == false)
        {
            return trip0;
        }
        for (j = 0; j < service_vector.size(); j++)
        {
            BinaryTreeNode *Head = service_vector[j]->getBSTHead();
            BinarySearchTree *Travel = new BinarySearchTree; // Create a new tree for each service
            Travel->setRoot(Head);                           // Set the root of the new tree
            BinaryTreeNode *Node = Travel->searchNodeWithKey(after_time);
            if (Node == NULL)
            {
                Node=Travel->getSuccessorNode(Node);
            }
            trip0.push_back(Node->getTripNodePtr());
            while (Travel->getSuccessorNode(Node) != NULL && Travel->getSuccessorNode(Node)->getDepartureTime() < before_time)
            {
                Node = Travel->getSuccessorNode(Node);
                trip0.push_back(Node->getTripNodePtr());
            }
            delete Travel; // Don't forget to delete the dynamically allocated tree
        }
        return trip0;
    }

    // void Inorder_Traversal(BinaryTreeNode*head){
    //     if(head==NULL)
    //         return;
    //     Inorder_Traversal(head->getLeftPtr());
    //     trips.push_back(head->getTripNodePtr());
    //     Inorder_Traversal(head->getRightPtr());
    // }
    
    std::vector<Trip *> showTripsbydestination(std::string pick_up_location, std::string destination, int after_time, int before_time)
    {
        // Implement this function to retrieve trips within a specified time range form pickup to droplocatin

        int i = 0;
        int j = 0;
        vector<Trip *> trip0;
        bool flag = false;
        vector<TransportService *> service_vector;
        for (i = 0; i < locations.size(); i++)
        {
            if (locations[i]->getName() == pick_up_location)
            {
                service_vector = locations[i]->getServiceVector();
                flag = true;
                break;
            }
        }
        if (flag == false)
        {
            return trip0;
        }
        for (j = 0; j < service_vector.size(); j++)
        {
            if (service_vector[j]->getName() == destination)
            {
                BinaryTreeNode *Head = service_vector[j]->getBSTHead();
                BinarySearchTree *Travel = new BinarySearchTree; // Create a new tree for each service
                Travel->setRoot(Head);                           // Set the root of the new tree
                BinaryTreeNode *Node = Travel->searchNodeWithKey(after_time);
                if (Node == NULL)
                {
                    Node = Travel->getSuccessorNode(Node);
                }
                trip0.push_back(Node->getTripNodePtr());
                while (Travel->getSuccessorNode(Node) != NULL && Travel->getSuccessorNode(Node)->getDepartureTime() < before_time)
                {
                    Node = Travel->getSuccessorNode(Node);
                    trip0.push_back(Node->getTripNodePtr());
                }
                delete Travel; // Don't forget to delete the dynamically allocated tree
            }
        }
        return trip0;
    }

    Trip *bookTrip(std::string pick_up_location, std::string drop_location, std::string vehicle_number, int departure_time)
    {
        // Implement this function to book a trip
        for (int i = 0; i < locations.size(); i++)
        {
            if (locations[i]->getName() == pick_up_location)
            {
                for (int j = 0; j < locations[i]->getServiceVector().size(); j++)
                {
                    if (locations[i]->getServiceVector()[j]->getName() == drop_location)
                    {
                        BinaryTreeNode *for_book;
                        for_book = locations[i]->getServiceVector()[j]->getBSTHead();
                        if (for_book->getTripNodePtr()->getVehicle()->getSeatingCapacity() > for_book->getTripNodePtr()->getBookedSeats())
                        {
                            for_book->getTripNodePtr()->setBookedSeats(for_book->getTripNodePtr()->getBookedSeats() + 1);
                            return for_book->getTripNodePtr();
                        }
                        else
                        {
                            return NULL;
                        }
                    }
                }
            }
        }
        return nullptr; // Placeholder
    }

    vector<Location *> getlocation()
    {
        return locations;
    }

    Location* getLocation(std::string location){
        int i;
        Location * locptr;
        for(i=0;i<locations.size();i++){
            if(locations[i]->getName()==location){
                locptr=locations[i];
                return locptr;
            }
        }
        Location* newLocation = new Location(location);
        locations.push_back(newLocation);
        locptr=newLocation;
        return locptr;
    }

    void readRecordsFromFile(const string &filename)
    {
        fstream fin;
        fin.open(filename, ios::in);
        string line;
        string word;
        string fn_call;
        vector<string> input;
        while (getline(fin, line))
        {
            for (int i = 0; i < line.length(); i++)
            {
                while (line[i] != ' ' && line[i] != '\0')
                {
                    fn_call.push_back(line[i]);
                    i++;
                }
                input.push_back(fn_call);
                fn_call.clear();
            }
            string time = input.back();
            time.erase(time.end() - 3);
            // cout<<time;
            // for(int i=time.length()-1;i>=0;i--){
            // }
            input.pop_back();
            input.push_back(time);
            if (input[0] == "ADDTRIP")
            {
                int seat_cap = stoi(input[2]);
                int dep_time = stoi(input[5]);
                addTrip(input[1], seat_cap, input[3], input[4], dep_time);
                // cout <<"add "<<input[i] << " ";
            }
            else if (input[0] == "SHOWTRIPS")
            {
                // cout <<"show " <<input[i] << " ";
            }
            else if (input[0] == "BOOKTRIP")
            {
                // cout <<"book "<<input[i] << " ";
            }
            else
            {
                // cout << "Wrong input!" << endl;
            }
        }
        cout << endl;
        input.clear();
    }

private:
    std::vector<Vehicle *> vehicles;
    std::vector<Location *> locations;
};
